

Custom Hook

자주 사용하는 Hook 코드들을 모아서 함수로 만들 수 있었는데요.

이때 useOOO 처럼 반드시 맨 앞에 use 라는 단어를 붙여서

다른 개발자들이 Hook이라는 걸 알 수 있게 해줘야 합니다.

useHooks 나 streamich/react-hooks 라는 사이트를 보시면
useHooks: https://usehooks.com/
streamich/react-hooks: https://github.com/streamich/react-use

다양한 Custom Hook이 소개되어 있는데요.

이 사이트들에서 다른 리액트 개발자들은 어떻게 사용하는지 살펴보시면 재미있을 겁니다.

여기선 간단한 예시만 몇 개 살펴보겠습니다.

useAsync
비동기 함수의 로딩, 에러 처리를 하는 데 사용할 수 있는 함수입니다.

함수를 asyncFunction 이라는 파라미터로 추상화해서

wrappedFunction 이라는 함수를 만들어 사용하는 방식을 눈여겨보시면 좋을 것 같습니다.

function useAsync(asyncFunction) {
  const [pending, setPending] = useState(false);
  const [error, setError] = useState(null);

  const wrappedFunction = useCallback(async (...args) => {
    setPending(true);
    setError(null);
    try {
      return await asyncFunction(...args);
    } catch (error) {
      setError(error);
    } finally {
      setPending(false);
    }
  }, [asyncFunction]);

  return [pending, error, wrappedFunction];
}
useToggle
toggle 함수를 호출할 때마다 value 값이 참/거짓으로 번갈아가며 바뀝니다.

ON/OFF 스위치 같은 걸 만들 때 유용하겠죠?

function useToggle(initialValue = false) {
  const [value, setValue] = useState(initialValue);
  const toggle = () => setValue((prevValue) => !prevValue);
  return [value, toggle];
}
useTimer
start 를 실행하면 callback 이라는 파라미터로 넘겨 준 함수를

timeout 밀리초 마다 실행하고, stop 을 실행하면 멈춥니다.

setInterval 이란 함수는 웹 브라우저에 함수를 등록해서

일정한 시간 간격마다 실행하는데요.

실행할 때마다 사이드 이펙트를 만들고, 사용하지 않으면 정리를 해줘야 합니다.

clearInterval 이라는 함수를 실행해서

사이드 이펙트를 정리하는 부분을 눈여겨 보시면 좋을 것 같습니다.

Custom Hook을 만들어서 이렇게 사이드 이펙트 정리를 빼먹지 않고 할 수 있겠죠?

function useTimer(callback, timeout) {
  const [isRunning, setIsRunning] = useState(false);

  const start = () => setIsRunning(true);

  const stop = () => setIsRunning(false);

  useEffect(() => {
    if (!isRunning) return;

    const timerId = setInterval(callback, timeout); // 사이드 이펙트 발생
    return () => {
      clearInterval(timerId); // 사이드 이펙트 정리
    };
  }, [isRunning, callback, timeout]);
  
  return [start, stop];
}
