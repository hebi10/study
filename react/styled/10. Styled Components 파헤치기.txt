이제 어느정도 Styled Components에 익숙해지셨나요?

이번 레슨에서는 태그 함수(Tagged Function)라는 걸 사용해서 Styled Components와 비슷한 함수를 만들어 볼 건데요. 그 과정을 통해 Styled Components의 편리한 문법이 어떻게 만들어진건지 한번 파헤쳐 보도록 하겠습니다.

우선 처음엔 문자열을 리턴하는 함수부터 만들어 보고, 여기서 값을 삽입하는 방법을 구현해 보고요, 최종적으로는 컴포넌트를 리턴하는 함수로 만들어 볼게요.

태그 함수(Tagged Function)
태그 함수(Tagged Function)는 템플릿 리터럴 문법을 사용해서 실행할 수 있는 함수입니다. 일단 코드부터 먼저 볼게요.

function h1(strings, ...values) {
  return [strings, values];
}
const result = h1`color: pink;`;
console.log(result); // [['color: pink;'], []]


보시면 h1 이라는 함수는 첫 번째 파라미터로 strings, 그리고 나머지 파라미터들을 values 배열로 받는데요. 이 함수를 템플릿 리터럴로 실행한 거 보이시나요? 이렇게 일반적인 형태로 함수를 선언하고, 템플릿 리터럴로 실행하면 특정한 형태로 파라미터가 전달됩니다.

어떤식으로 전달되는지 확인해보려고 일단 console.log 로 출력해봤는데요. strings 에는 입력한 문자열이 배열로 나오네요. values 는 빈 배열로 출력됩니다.

이번에는 템플릿 리터럴에 값을 삽입하고 출력해보죠.

function h1(strings, ...values) {
  return [strings, values];
}
const backgroundColor = 'black';
const result2 = h1`
  background-color: ${backgroundColor};
  color: pink;
`;
console.log(result2);
// [['\n  background-color: ', ';\n  color: pink;\n'], ['black']]


strings 에는 값이 삽입되는 부분 앞뒤의 문자열들이 잘려서 배열로 들어가 있고, values에는 삽입된 값들이 배열로 들어가 있습니다. 이것이 태그 함수의 기본적인 동작입니다. 이걸 사용해서 CSS 스타일이 생성된 리액트 컴포넌트를 만드는 것이 Styled Components의 핵심 아이디어입니다.

간단하게 <style> 태그를 렌더링하는 컴포넌트를 만들어 볼게요. 실제 Styled Components는 더 복잡하고 정교하게 만들어졌겠지만, 저희는 좀 더 간단한 버전으로 만들어 보겠습니다.

function h1(strings, ...values) {
  // React 컴포넌트를 만든다
  function Component({ children }) {
    // 템플릿 리터럴에서 받은 값을 CSS 코드로 만든다
    let style = '';
    for (let i = 0; i < strings.length; ++i) {
      style += strings[i];
      if (values[i]) {
        style += values[i];
      }
    }

    // CSS 코드에 따라 클래스 이름을 만든다
    const className = `my-sc-${style.length}`;

    // `<style>` 태그로 만든 CSS 코드를 렌더링한다
    return (
      <>
        <style>{`.${className} {${style}}`}</style>
        <h1 className={className}>{children}</h1>
      </>
    );
  }
  return Component;
}

const backgroundColor = 'black';
const StyledH1 = h1`
  background-color: ${backgroundColor};
  color: pink;
`;

function App() {
  return <StyledH1>Hello World</StyledH1>;
}

export default App;
Untitled


위 코드에서 Component 라는 부분이 약간 헷갈릴 수 있는데, 컴포넌트 함수를 선언하는 부분이라고 이해하시면 됩니다. 태그 함수 안에서 컴포넌트를 만들고 이걸 리턴하는 건데요. 이 컴포넌트는 우리가 태그 함수에서 집어넣은 CSS 코드를 <style> 태그에 렌더링하는 컴포넌트입니다.

내부적으로 사용할 클래스 이름도 만들었는데요. 여기선 단순하게 CSS 코드 길이를 가지고 클래스 이름을 생성했습니다(my-sc${style.length} 부분). Styled Components에서는 내부적으로 클래스네임을 알아서 생성해주기 때문에 우리가 클래스 이름을 신경 쓸 필요가 없었죠.

여기서 마지막으로 함수를 삽입하는 예시도 한번 만들어 봅시다. 단순히 strings 와 values 배열을 합쳐주는 게 아니라, React 컴포넌트의 Props를 활용하는 함수가 삽입되는 경우를 처리할 건데요.

function h1(strings, ...values) {
  // React 컴포넌트를 만든다
  function Component({ children, ...props }) {
    // 템플릿 리터럴에서 받은 값을 CSS 코드로 만든다
    let style = '';
    for (let i = 0; i < strings.length; ++i) {
      style += strings[i];
      // 삽입된 값이 함수이면 props를 가지고 실행한 값을 CSS에 넣는다.
      if (typeof values[i] === 'function') {
        const fn = values[i];
        style += fn(props);

        // 그 외에 값이 존재하면 CSS에 문자열로 넣는다.
      } else if (values[i]) {
        style += values[i];
      }
    }

    // CSS 코드에 따라 클래스 이름을 만든다
    const className = `my-sc-${style.length}`;

    // `<style>` 태그로 만든 CSS 코드를 렌더링한다
    return (
      <>
        <style>{`.${className} {${style}}`}</style>
        <h1 className={className}>{children}</h1>
      </>
    );
  }
  return Component;
}

const backgroundColor = 'black';
const StyledH1 = h1`
  color: pink;
  ${({ dark }) => dark && 'background-color: black;'}
`;

function App() {
  return <StyledH1 dark>Hello World</StyledH1>;
}

export default App;


이번에는 Component 함수 안에서 CSS 코드를 생성하는 부분에 함수를 처리하는 부분이 추가되었습니다. 위 코드가 실행되는 순서를 하나씩 생각해 볼게요.

템플릿 리터럴로 태그 함수 h1 을 실행해서, StyledH1 이라는 컴포넌트가 만들어진다.
App 컴포넌트를 렌더링하면 StyledH1 컴포넌트도 렌더링한다.
StyledH1 컴포넌트에서는 CSS 코드를 생성해서 <style> 태그로 넣는다. 이때 함수로 삽입된 값(${({ dark }) => dark && 'background-color: black;'} 부분)은 함수이기 때문에, Props를 가지고 실행해서 CSS로 만든다. 우리 코드에서는 dark 라는 값이 있기 때문에, CSS에는 background-color: black; 이라는 값으로 반영된다.
마법처럼 보이던 문법이 이제 조금 친숙해지셨나요?